from __future__ import annotations

import os
import asyncpg
import logging
import json
import time
from typing import Dict, List
from collections import defaultdict

from dotenv import load_dotenv
from fastapi import FastAPI, Request, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import Response

from src.utils import UserHandler  # type: ignore  # noqa

logger = logging.getLogger(__name__)

load_dotenv()
user_handler = UserHandler()

HOST = os.environ["HOST"]
PORT = os.environ["PORT"]
ENVIRONMENT = os.environ.get("ENVIRONMENT", "development")

# Rate limiting storage (use Redis in production)
rate_limit_storage: Dict[str, List[float]] = defaultdict(list)

class RateLimitMiddleware(BaseHTTPMiddleware):
    """Rate limiting middleware"""
    def __init__(self, app, requests_per_minute: int = 60):
        super().__init__(app)
        self.requests_per_minute = requests_per_minute

    async def dispatch(self, request: Request, call_next):
        client_ip = request.client.host
        now = time.time()
        
        # Clean old requests (older than 1 minute)
        rate_limit_storage[client_ip] = [
            req_time for req_time in rate_limit_storage[client_ip]
            if now - req_time < 60
        ]
        
        # Check rate limit
        if len(rate_limit_storage[client_ip]) >= self.requests_per_minute:
            logger.warning(f"Rate limit exceeded for IP: {client_ip}")
            return Response(
                content="Rate limit exceeded",
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                headers={"Retry-After": "60"}
            )
        
        # Add current request
        rate_limit_storage[client_ip].append(now)
        
        response = await call_next(request)
        return response

class SecurityHeadersMiddleware(BaseHTTPMiddleware):
    """Add security headers to all responses"""
    async def dispatch(self, request: Request, call_next):
        response = await call_next(request)
        
        # Security headers
        response.headers["X-Content-Type-Options"] = "nosniff"
        response.headers["X-Frame-Options"] = "DENY"
        response.headers["X-XSS-Protection"] = "1; mode=block"
        response.headers["Strict-Transport-Security"] = "max-age=31536000; includeSubDomains"
        response.headers["Referrer-Policy"] = "strict-origin-when-cross-origin"
        response.headers["Content-Security-Policy"] = "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';"
        
        return response

class InputValidationMiddleware(BaseHTTPMiddleware):
    """Basic input validation middleware"""
    async def dispatch(self, request: Request, call_next):
        # Check for suspicious patterns in headers
        suspicious_headers = ["../", "..\\", "script", "javascript", "data:"]
        
        for header_name, header_value in request.headers.items():
            header_value_lower = header_value.lower()
            for pattern in suspicious_headers:
                if pattern in header_value_lower:
                    logger.warning(f"Suspicious header detected: {header_name}: {header_value}")
                    return Response(
                        content="Invalid request",
                        status_code=status.HTTP_400_BAD_REQUEST
                    )
        
        response = await call_next(request)
        return response


class RequestLoggingMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        # Log request details
        logger.info(f"üì• {request.method} {request.url.path}")
        
        # For POST requests to /posts, log the raw body
        if request.method == "POST" and request.url.path == "/posts":
            try:
                body = await request.body()
                logger.info(f"üìÑ Raw request body: {body.decode('utf-8')}")
                
                # Try to parse as JSON for better logging
                try:
                    json_body = json.loads(body.decode('utf-8'))
                    logger.info(f"üìÑ Parsed JSON body: {json.dumps(json_body, indent=2)}")
                except json.JSONDecodeError:
                    logger.warning("üìÑ Request body is not valid JSON")
                    
            except Exception as e:
                logger.error(f"‚ùå Error reading request body: {e}")
        
        response = await call_next(request)
        
        # Log response status
        logger.info(f"üì§ Response status: {response.status_code}")
        
        return response


async def startup():
    await user_handler.init()

    # Initialize PostgreSQL connection pool
    app.state.pool = await asyncpg.create_pool(
        os.environ["DATABASE_URL"],
        min_size=1,
        max_size=10
    )
    app.state.jwt_secret = os.environ["JWT_SECRET"]


async def shutdown():
    if hasattr(app.state, 'pool'):
        await app.state.pool.close()


app = FastAPI(title="Creatist API Documentation", on_startup=[startup], on_shutdown=[shutdown])

# Production CORS configuration
if ENVIRONMENT == "production":
    cors_origins = [
        "https://your-production-domain.com",  # Replace with your actual domain
        "https://www.your-production-domain.com",
        "https://app.your-production-domain.com",
    ]
    trusted_hosts = [
        "your-production-domain.com",
        "www.your-production-domain.com",
        "app.your-production-domain.com",
    ]
else:
    # Development CORS configuration
    cors_origins = [
        "http://localhost:3000",
        "http://localhost:8080",
        "http://127.0.0.1:3000",
        "http://127.0.0.1:8080",
    ]
    trusted_hosts = [
        "localhost",
        "127.0.0.1",
    ]

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# Add trusted host middleware
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=trusted_hosts
)

# Add security middleware (order matters)
app.add_middleware(SecurityHeadersMiddleware)
app.add_middleware(InputValidationMiddleware)
app.add_middleware(RateLimitMiddleware, requests_per_minute=60)
app.add_middleware(RequestLoggingMiddleware)

from .routes import *  # noqa
from .routes.ws_chat import router as ws_router
from .routes.post import router as post_router
from .routes.health import router as health_router

# Include routers
app.include_router(health_router)
app.include_router(ws_router)
app.include_router(post_router)
